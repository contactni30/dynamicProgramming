package optimalSolution;

public class KnapsackRecursive {

	static int count = 0;
	
	public static void main(String args[]) {
		int W = 165;
		int[] value = new int[] {92,57,49,68,60,43,67,84,87,72};
		int[] weight = new int[] {23,31,29,44,53,38,63,85,89,82};
		
		int len = value.length;
		// Stores Optimal Value
		int[][] table1 = new int[W+1][len+1];
		// Stores the first weight deducted for a particular Weight
		int[] table2 = new int[W+1];
		
		int[] s = new int[len+1];
		
		KnapsackRecursive knap = new KnapsackRecursive();
		int res = knap.evaluateValue(W,value,weight,len-1,table1,table2);
		
		System.out.println(res);
		
		knap.printValue(table2,W);
	}
	
	public void printValue(int[] table2, int W) {
		if(W==0) {
			System.out.print("");
		}else {
			System.out.print(table2[W]+"  ");
			printValue(table2,W-table2[W]);
		}
	}
	
	
	// Calculates Optimal Value and Optimal Solution using Top Down Approach
	public int evaluateValue(int W, int[] value, int[] weight, int len,int[][] table1, int[] table2) {
		if(len<0 || W==0) {
			return 0;
		}else if(table1[W][len+1]!=0) {
			return table1[W][len+1];
		}else {
			if(W<weight[len]) {
				table1[W][len+1] = evaluateValue(W,value,weight,len-1,table1,table2);
				return table1[W][len+1];
			}else {
				int p = evaluateValue(W,value,weight,len-1,table1,table2);
				int q = value[len] + evaluateValue(W-weight[len],value,weight,len-1,table1,table2);
				if(p>q) {
					table1[W][len+1] = p;
				}else {
					table1[W][len+1] = q;
					table2[W] = weight[len];
				}
				return table1[W][len+1];
			}
		}
	}
	

}
